
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ylzfehbakihjqghbxdta.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlsemZlaGJha2loanFnaGJ4ZHRhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM3MDYxNzEsImV4cCI6MjA1OTI4MjE3MX0.y5_SrX6NOxG4MHWAEUq-RXTtRvCBGvmcAM44_TD1VjY";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storageKey: 'apihub_auth_token',
    }
  }
);

// Log API request helper function to track API usage
export const logApiRequest = async ({
  subscriptionId,
  endpointPath,
  statusCode,
  responseTime,
  requestMethod,
  requestHeaders = null,
  requestQuery = null,
  requestBody = null,
  responseHeaders = null,
  responseBody = null,
  error = null
}: {
  subscriptionId: string;
  endpointPath: string;
  statusCode: number;
  responseTime: number;
  requestMethod: string;
  requestHeaders?: any;
  requestQuery?: any;
  requestBody?: any;
  responseHeaders?: any;
  responseBody?: any;
  error?: string | null;
}) => {
  try {
    const { data, error: dbError } = await supabase.rpc('log_api_request', {
      p_subscription_id: subscriptionId,
      p_endpoint_path: endpointPath,
      p_status_code: statusCode,
      p_response_time: responseTime,
      p_request_method: requestMethod,
      p_request_headers: requestHeaders,
      p_request_query: requestQuery,
      p_request_body: requestBody,
      p_response_headers: responseHeaders,
      p_response_body: responseBody,
      p_error: error
    });

    if (dbError) console.error('Failed to log API request:', dbError);
    return data;
  } catch (error) {
    console.error('Error in logApiRequest:', error);
    return null;
  }
};
